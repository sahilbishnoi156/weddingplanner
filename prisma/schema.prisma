generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}
model Wedding {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())

  cities     City[]
  categories Category[]
  guests     Guest[]
  checks     Check[]

  @@index([code])
}

model City {
  id        Int     @id @default(autoincrement())
  name      String
  weddingId Int
  wedding   Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  guests    Guest[]

  // city name must be unique per wedding
  @@unique([weddingId, name])
  @@index([weddingId])
  @@index([name])
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String
  type      String  @default("checkbox")
  weddingId Int
  wedding   Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)

  checks Check[]

  // category name unique per wedding
  @@unique([weddingId, name])
  @@index([weddingId])
}

model Guest {
  id        Int     @id @default(autoincrement())
  name      String
  cityId    Int?
  city      City?   @relation(fields: [cityId], references: [id])
  checks    Check[]
  weddingId Int
  wedding   Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@index([name, weddingId])
  @@index([cityId])
  @@index([weddingId])
}

model Check {
  id          Int     @id @default(autoincrement())
  guestId     Int
  categoryId  Int
  checked     Boolean @default(false)
  updatedAt   DateTime @updatedAt
  weddingId   Int
  wedding     Wedding  @relation(fields: [weddingId], references: [id], onDelete: Cascade)

  guest     Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade)
  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([guestId, categoryId])
  @@index([categoryId])
  @@index([weddingId])
}
